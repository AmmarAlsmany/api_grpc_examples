# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import ros_messages_pb2 as ros__messages__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ros_messages_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ROSBridgeStub(object):
    """ROSBridge service provides bidirectional communication between ROS and Python applications
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamSensorData = channel.stream_stream(
                '/ros_messages.ROSBridge/StreamSensorData',
                request_serializer=ros__messages__pb2.SensorData.SerializeToString,
                response_deserializer=ros__messages__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.StreamRobotPose = channel.stream_stream(
                '/ros_messages.ROSBridge/StreamRobotPose',
                request_serializer=ros__messages__pb2.RobotPose.SerializeToString,
                response_deserializer=ros__messages__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.StreamImageData = channel.stream_stream(
                '/ros_messages.ROSBridge/StreamImageData',
                request_serializer=ros__messages__pb2.ImageData.SerializeToString,
                response_deserializer=ros__messages__pb2.StatusResponse.FromString,
                _registered_method=True)


class ROSBridgeServicer(object):
    """ROSBridge service provides bidirectional communication between ROS and Python applications
    """

    def StreamSensorData(self, request_iterator, context):
        """StreamSensorData handles continuous sensor data transmission
        Client can send sensor data and receive status updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamRobotPose(self, request_iterator, context):
        """StreamRobotPose handles continuous robot pose updates
        Client can send pose data and receive status updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamImageData(self, request_iterator, context):
        """StreamImageData handles continuous image data transmission
        Client can send image data and receive status updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ROSBridgeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamSensorData': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamSensorData,
                    request_deserializer=ros__messages__pb2.SensorData.FromString,
                    response_serializer=ros__messages__pb2.StatusResponse.SerializeToString,
            ),
            'StreamRobotPose': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamRobotPose,
                    request_deserializer=ros__messages__pb2.RobotPose.FromString,
                    response_serializer=ros__messages__pb2.StatusResponse.SerializeToString,
            ),
            'StreamImageData': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamImageData,
                    request_deserializer=ros__messages__pb2.ImageData.FromString,
                    response_serializer=ros__messages__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros_messages.ROSBridge', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ros_messages.ROSBridge', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ROSBridge(object):
    """ROSBridge service provides bidirectional communication between ROS and Python applications
    """

    @staticmethod
    def StreamSensorData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/ros_messages.ROSBridge/StreamSensorData',
            ros__messages__pb2.SensorData.SerializeToString,
            ros__messages__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamRobotPose(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/ros_messages.ROSBridge/StreamRobotPose',
            ros__messages__pb2.RobotPose.SerializeToString,
            ros__messages__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamImageData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/ros_messages.ROSBridge/StreamImageData',
            ros__messages__pb2.ImageData.SerializeToString,
            ros__messages__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
